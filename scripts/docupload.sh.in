#!/usr/bin/env bash
# Upload the generated documentation to the github pages doc site.
#
# See LICENSE file. (c) 2022 Johan Persson <johan162@gmail.com>
set -u

# This is the user for which to upload the docs to.
GITHUB_USER="johan162"

PACKAGE_NAME="@PACKAGE_NAME@"
VERSION="@VERSION@"
DOCVERSION="v${VERSION}"
PDFNAME="${PACKAGE_NAME}-${VERSION}.pdf"
COMMIT_MESSAGE="Documentation update for ${PACKAGE_NAME} ${DOCVERSION}"
GITHUB_PAGES_URL="git@github.com:${GITHUB_USER}/${GITHUB_USER}.github.io.git"
GITHUB_PAGES_REPO="${GITHUB_USER}.github.io"

HTMLDIR_COPY="/docs/out/html"
PDFFILE_COPY="/docs/out/latex/refman.pdf"

ORIG_DIR="${PWD}"

quiet_flag=0
# User information
# Arg 1: Info text to display
infolog() {
    [ $quiet_flag -eq 0 ] && printf "Info: %s\n" "$1"
}

# User information
# Arg 1: Info text to display
errlog() {
    [ $quiet_flag -eq 0 ] && printf "***ERROR***: %s\n" "$1" >&2
}

# Print usage
# Arg 1: name of script
usage() {
    echo "Update documentaion on github pages for libhpdftbl"
    echo "Usage:"
    echo "\$ $1 [-q]"
    echo "-q          : Quiet"
    echo "-h          : Print help and exit"
}

# Upload documentation
docupload() {

    # Sanity check to check if script is rung from top directory or one below
    [ -d "docs" ] && PACKAGE_BASEDIR="${PWD}"
    [ -d "../docs" ]  &&  PACKAGE_BASEDIR="${PWD}/.."
    [ -z $PACKAGE_BASEDIR ] && errlog "Please run from package top directory" && exit 1

    # Seed with current process-id and create a random named directory for checkout
    RANDOM=$$
    co_dir="/tmp/io${RANDOM}${RANDOM}"
    mkdir "${co_dir}"
    cd "${co_dir}" || exit 1

    # Checkout a copy of the pages in this directory
    git clone "${GITHUB_PAGES_URL}"
    cd "${GITHUB_PAGES_REPO}/${PACKAGE_NAME}" || exit 1

    # Replace the documentation. Start by deleting the old docs
    for f in ${HTMLDIR_COPY};  do
        # Delete the basename of HTML dirs
        rm -rf "${f##*/}"
    done

    cp -r ${PACKAGE_BASEDIR}${HTMLDIR_COPY} .
    if [ $? -eq 0 ]; then
      infolog "Copied ${PACKAGE_BASEDIR}${HTMLDIR_COPY} to ${PWD}"
    else
      errlog "Could NOT copy ${PACKAGE_BASEDIR}${HTMLDIR_COPY} to ${PWD}"
      exit 1
    fi

    cp -r ${PACKAGE_BASEDIR}${PDFFILE_COPY} ${PDFNAME}
    if [ $? -eq 0 ]; then
      infolog "Copied ${PACKAGE_BASEDIR}${PDFFILE_COPY} to ${PWD}/${PDFNAME}"
    else
      errlog "Could NOT copy ${PACKAGE_BASEDIR}${PDFFILE_COPY} to ${PWD}/${PDFNAME}"
      exit 1
    fi

    # Update and push
    # infolog "git add \"${HTMLDIR_COPY##*/}\" \"${PDFNAME}\""
    # infolog "git commit -m \"${COMMIT_MESSAGE}\""
    git add "${HTMLDIR_COPY##*/}" "${PDFNAME}"
    git commit -m "${COMMIT_MESSAGE}"
    if [ $? -eq 0 ]; then
      git push && infolog "Pushed docs to origin" || errlog "Failed to push to origin"
    else
      errlog "Failed to commit new docs"
    fi

    # Clean up temp directory
    cd "${ORIG_DIR}"
    rm  -rf "${co_dir}" && infolog "Deleted ${co_dir}"
}

# Parse options and run program
while [[ $OPTIND -le "$#" ]]; do
    if getopts ch option; then
        case $option in
        h)
            usage "$(basename $0)"
            exit 0
            ;;
         q)
            quiet_flag=1
            ;;
        [?])
            usage "$(basename $0)"
            exit 1
            ;;
        esac
    fi
done

# Do the work
docupload

# EOF